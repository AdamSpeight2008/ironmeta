//////////////////////////////////////////////////////////////////////
// $Id$
//
// Copyright (c) The IronMeta Project 2009
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////

ironMeta Calc<char, int> : IronMeta.CharacterMatcher<int>
{
	Expression = Additive;
	
	Additive = Add | Sub | Multiplicative;
		
	Add = BinaryOp(Additive, '+', Multiplicative) -> { return _IM_Result.Results.Aggregate((total, n) => total + n); };
	Sub = BinaryOp(Additive, '-', Multiplicative) -> { return _IM_Result.Results.Aggregate((total, n) => total - n); };

	Multiplicative = Multiply | Divide;
	Multiplicative = Number;
	
	Multiply = BinaryOp(Multiplicative, '*', Number) -> { return _IM_Result.Results.Aggregate((p, n) => p * n); };
	Divide = BinaryOp(Multiplicative, '/', Number) -> { return _IM_Result.Results.Aggregate((q, n) => q / n); };
	
	BinaryOp :first :op :second = first:a KW(op) second:b -> { return new List<int> { a, b }; };
	
	Number = Digit+:digits base.Whitespace* -> { return digits.Results.Aggregate(0, (sum, n) => sum*10 + n); };
	
	KW .*:str = str:res Whitespace*;
	
	Digit = ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') -> { return (int)_IM_Result - '0'; };
}
