//////////////////////////////////////////////////////////////////////
//
// Copyright © 2014 Gordon Tisher
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions 
// are met:
// 
//     * Redistributions of source code must retain the above 
//       copyright notice, this list of conditions and the following 
//       disclaimer.
//     * Redistributions in binary form must reproduce the above 
//       copyright notice, this list of conditions and the following 
//       disclaimer in the documentation and/or other materials 
//       provided with the distribution.
//     * Neither the name of the IronMeta Project nor the names of its 
//       contributors may be used to endorse or promote products 
//       derived from this software without specific prior written 
//       permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
// "AS IS" AND  ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING, BUT NOT 
// LIMITED TO, THE  IMPLIED WARRANTIES OF  MERCHANTABILITY AND FITNESS 
// FOR  A  PARTICULAR  PURPOSE  ARE DISCLAIMED. IN  NO EVENT SHALL THE 
// COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
// BUT NOT  LIMITED TO, PROCUREMENT  OF SUBSTITUTE  GOODS  OR SERVICES; 
// LOSS OF USE, DATA, OR  PROFITS; OR  BUSINESS  INTERRUPTION) HOWEVER 
// CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT 
// LIABILITY, OR  TORT (INCLUDING NEGLIGENCE  OR OTHERWISE) ARISING IN 
// ANY WAY OUT  OF THE  USE OF THIS SOFTWARE, EVEN  IF ADVISED  OF THE 
// POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////

ironmeta LRParser<char, string> : IronMeta.Matcher.CharMatcher<string>
{

	A = A:a A:b -> { "(" + (string)a + (string)b + ")" } | 'a' -> { "a" };

	Exp = Exp:e "+" Term:t -> { "(" + (string)e + " + " + (string)t + ")" } | Term;
	Term = "1" -> { "1" };

	NonLR = NonLR_A NonLR_B;

	NonLR_A = "a";
	NonLR_B = "b" | NonLR_C;
	NonLR_C = "c";

	AAA = AAA*:x "a":y -> { "(" + (string)x + "a)" } | "b":z -> { "b" };


	Character = HexEscapeCharacter;

	HexEscapeCharacter = "#\\x" HexScalarValue:hex -> 
	{ 
		foreach (var input in hex.Inputs)
			Console.WriteLine("{0}", input);
		return "";
	};
	HexScalarValue = HexDigit+;
	HexDigit = Digit | 'a' | 'A' | 'b' | 'B' | 'c' | 'C' | 'd' | 'D' | 'e' | 'E' | 'f' | 'F';
	Digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';

}
